function openDatabase(){if(!navigator.serviceWorker)return Promise.resolve();return idb.open("restaurantsDB",1,function(e){e.createObjectStore("restStore",{keyPath:"id"})})}class DBHelper{static getCachedRest(e){return e.then(function(e){if(!e)return void console.log("no db found");return e.transaction("restStore").objectStore("restStore").getAll()})}static putCachedRest(e,t){return e.then(function(e){if(!e)return;let r=e.transaction("restStore","readwrite"),n=r.objectStore("restStore");for(var s of t)n.put(s);r.complete})}static get DATABASE_URL(){return"http://localhost:1337/restaurants"}static fetchRestaurants(e){const t=openDatabase();DBHelper.getCachedRest(t).then(r=>{r&&r.length>0?(console.log("loaded restaurants from db"),e(null,r)):fetch(DBHelper.DATABASE_URL).then(e=>{if(console.log("getting restaurants from network"),e)return e.json()}).then(r=>{DBHelper.putCachedRest(t,r),e(null,r),console.log("added restaurants to db")})}).catch(e=>console.error("Error: ",e))}static fetchRestaurantById(e,t){DBHelper.fetchRestaurants((r,n)=>{if(r)t(r,null);else{const r=n.find(t=>t.id==e);r?t(null,r):t("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(e,t){DBHelper.fetchRestaurants((r,n)=>{if(r)t(r,null);else{const r=n.filter(t=>t.cuisine_type==e);t(null,r)}})}static fetchRestaurantByNeighborhood(e,t){DBHelper.fetchRestaurants((r,n)=>{if(r)t(r,null);else{const r=n.filter(t=>t.neighborhood==e);t(null,r)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,r){DBHelper.fetchRestaurants((n,s)=>{if(n)r(n,null);else{let n=s;"all"!=e&&(n=n.filter(t=>t.cuisine_type==e)),"all"!=t&&(n=n.filter(e=>e.neighborhood==t)),r(null,n)}})}static fetchNeighborhoods(e){DBHelper.fetchRestaurants((t,r)=>{if(t)e(t,null);else{const t=r.map((e,t)=>r[t].neighborhood),n=t.filter((e,r)=>t.indexOf(e)==r);e(null,n)}})}static fetchCuisines(e){DBHelper.fetchRestaurants((t,r)=>{if(t)e(t,null);else{const t=r.map((e,t)=>r[t].cuisine_type),n=t.filter((e,r)=>t.indexOf(e)==r);e(null,n)}})}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e){return`/img/${e.photograph}.jpg`}static mapMarkerForRestaurant(e,t){const r=new L.marker([e.latlng.lat,e.latlng.lng],{title:e.name,alt:e.name,keyboard:!1,url:DBHelper.urlForRestaurant(e)});return r.addTo(newMap),r}static registerServiceWorker(){navigator.serviceWorker&&navigator.serviceWorker.register("/sw.js").then(e=>console.log("Service Worker Registered with scope: ",e.scope),e=>console.log("service worker failed: ",e))}}