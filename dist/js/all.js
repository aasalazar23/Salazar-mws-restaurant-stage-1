class DBHelper{static get DATABASE_URL(){return"http://localhost:8000/data/restaurants.json"}static fetchRestaurants(e){let t=new XMLHttpRequest;t.open("GET",DBHelper.DATABASE_URL),t.onload=(()=>{if(200===t.status){const n=JSON.parse(t.responseText).restaurants;e(null,n)}else{const n=`Request failed. Returned status of ${t.status}`;e(n,null)}}),t.send()}static fetchRestaurantById(e,t){DBHelper.fetchRestaurants((n,a)=>{if(n)t(n,null);else{const n=a.find(t=>t.id==e);n?t(null,n):t("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(e,t){DBHelper.fetchRestaurants((n,a)=>{if(n)t(n,null);else{const n=a.filter(t=>t.cuisine_type==e);t(null,n)}})}static fetchRestaurantByNeighborhood(e,t){DBHelper.fetchRestaurants((n,a)=>{if(n)t(n,null);else{const n=a.filter(t=>t.neighborhood==e);t(null,n)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,n){DBHelper.fetchRestaurants((a,r)=>{if(a)n(a,null);else{let a=r;"all"!=e&&(a=a.filter(t=>t.cuisine_type==e)),"all"!=t&&(a=a.filter(e=>e.neighborhood==t)),n(null,a)}})}static fetchNeighborhoods(e){DBHelper.fetchRestaurants((t,n)=>{if(t)e(t,null);else{const t=n.map((e,t)=>n[t].neighborhood),a=t.filter((e,n)=>t.indexOf(e)==n);e(null,a)}})}static fetchCuisines(e){DBHelper.fetchRestaurants((t,n)=>{if(t)e(t,null);else{const t=n.map((e,t)=>n[t].cuisine_type),a=t.filter((e,n)=>t.indexOf(e)==n);e(null,a)}})}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e){return`/img/${e.photograph}`}static mapMarkerForRestaurant(e,t){const n=new L.marker([e.latlng.lat,e.latlng.lng],{title:e.name,alt:e.name,keyboard:!1,url:DBHelper.urlForRestaurant(e)});return n.addTo(newMap),n}}let restaurants,neighborhoods,cuisines;var markers=[];let restaurant;var newMap;document.addEventListener("DOMContentLoaded",e=>{initMap(),fetchNeighborhoods(),fetchCuisines(),tabOrder()}),tabOrder=(()=>{var e=document.getElementsByClassName("leaflet-control-zoom-in"),t=document.getElementsByClassName("leaflet-control-zoom-out");document.getElementsByClassName("leaflet-control-attribution")[0].firstChild.setAttribute("tabindex","-1"),e[0].setAttribute("tabindex","-1"),t[0].setAttribute("tabindex","-1")}),fetchNeighborhoods=(()=>{DBHelper.fetchNeighborhoods((e,t)=>{e?console.error(e):(self.neighborhoods=t,fillNeighborhoodsHTML())})}),fillNeighborhoodsHTML=((e=self.neighborhoods)=>{const t=document.getElementById("neighborhoods-select");t.setAttribute("role","menu"),t.setAttribute("aria-label","Neighborhood Filter Menu"),e.forEach(e=>{const n=document.createElement("option");n.innerHTML=e,n.value=e,n.tabIndex="0",t.append(n)})}),fetchCuisines=(()=>{DBHelper.fetchCuisines((e,t)=>{e?console.error(e):(self.cuisines=t,fillCuisinesHTML())})}),fillCuisinesHTML=((e=self.cuisines)=>{const t=document.getElementById("cuisines-select");t.setAttribute("role","menu"),t.setAttribute("aria-label","Cuisine Filter Menu"),e.forEach(e=>{const n=document.createElement("option");n.innerHTML=e,n.value=e,n.tabIndex="0",t.append(n)})}),initMap=(()=>{self.newMap=L.map("map",{center:[40.722216,-73.987501],zoom:12,keyboard:!1,scrollWheelZoom:!1}),L.tileLayer("https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}",{mapboxToken:"pk.eyJ1IjoiYWFzYWxhemFyMjMiLCJhIjoiY2prd3QyMzEwMDFlYTN2cDRwdGxzc2xxNSJ9.6TWd0k6o60IPKrUBkKxbww",maxZoom:18,attribution:'Map data &copy; <a href="https://www.openstreetmap.org/" tabindex="-1">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/" tabindex="-1">CC-BY-SA</a>, Imagery © <a href="https://www.mapbox.com/" tabindex="-1">Mapbox</a>',id:"mapbox.streets"}).addTo(newMap),updateRestaurants()}),updateRestaurants=(()=>{const e=document.getElementById("cuisines-select"),t=document.getElementById("neighborhoods-select"),n=e.selectedIndex,a=t.selectedIndex,r=e[n].value,s=t[a].value;DBHelper.fetchRestaurantByCuisineAndNeighborhood(r,s,(e,t)=>{e?console.error(e):(resetRestaurants(t),fillRestaurantsHTML())})}),resetRestaurants=(e=>{self.restaurants=[],document.getElementById("restaurants-list").innerHTML="",self.markers&&self.markers.forEach(e=>e.remove()),self.markers=[],self.restaurants=e}),fillRestaurantsHTML=((e=self.restaurants)=>{const t=document.getElementById("restaurants-list");e.forEach(e=>{t.append(createRestaurantHTML(e))}),addMarkersToMap()}),createRestaurantHTML=(e=>{const t=document.createElement("li"),n=document.createElement("img");n.className="restaurant-img",n.src=DBHelper.imageUrlForRestaurant(e),n.alt=e.alt_text,n.tabIndex="0",t.append(n);const a=document.createElement("div");a.className="restaurant-card",t.append(a);const r=document.createElement("a");r.className="restaurant-name",r.innerHTML=e.name,r.tabIndex="0",r.href=DBHelper.urlForRestaurant(e),a.append(r);const s=document.createElement("p");s.className="restaurant-neighborhood",s.innerHTML=e.neighborhood,s.tabIndex="0",a.append(s);const o=document.createElement("p");return o.className="restaurant-address",o.innerHTML=e.address,s.tabIndex="0",a.append(o),t}),addMarkersToMap=((e=self.restaurants)=>{e.forEach(e=>{const t=DBHelper.mapMarkerForRestaurant(e,self.newMap);t.on("click",function(){window.location.href=t.options.url}),self.markers.push(t),map=document.getElementById("map"),map.tabIndex=-1})}),document.addEventListener("DOMContentLoaded",e=>{initMap()}),tabOrder=(()=>{var e=document.getElementsByClassName("leaflet-control-zoom-in"),t=document.getElementsByClassName("leaflet-control-zoom-out"),n=document.getElementsByClassName("leaflet-control-attribution"),a=document.getElementById("map");n[0].firstChild.setAttribute("tabindex","-1"),e[0].setAttribute("tabindex","-1"),t[0].setAttribute("tabindex","-1"),a.setAttribute("tabindex","-1")}),initMap=(()=>{fetchRestaurantFromURL((e,t)=>{e?console.error(e):(self.newMap=L.map("map",{center:[t.latlng.lat,t.latlng.lng],zoom:16,scrollWheelZoom:!1}),L.tileLayer("https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}",{mapboxToken:"pk.eyJ1IjoiYWFzYWxhemFyMjMiLCJhIjoiY2prd3QyMzEwMDFlYTN2cDRwdGxzc2xxNSJ9.6TWd0k6o60IPKrUBkKxbww",maxZoom:18,attribution:'Map data &copy; <a href="https://www.openstreetmap.org/" tabindex="-1">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/" tabindex="-1">CC-BY-SA</a>, Imagery © <a href="https://www.mapbox.com/" tabindex="-1">Mapbox</a>',id:"mapbox.streets"}).addTo(newMap),fillBreadcrumb(),DBHelper.mapMarkerForRestaurant(self.restaurant,self.newMap),tabOrder())})}),fetchRestaurantFromURL=(e=>{if(self.restaurant)return void e(null,self.restaurant);const t=getParameterByName("id");t?DBHelper.fetchRestaurantById(t,(t,n)=>{self.restaurant=n,n?(fillRestaurantHTML(),e(null,n)):console.error(t)}):(error="No restaurant id in URL",e(error,null))}),fillRestaurantHTML=((e=self.restaurant)=>{const t=document.getElementById("restaurant-name");t.className="info-name",t.innerHTML=e.name,t.setAttribute("tabindex","0");const n=document.getElementById("restaurant-cuisine");n.className="info-cuisine",n.innerHTML=e.cuisine_type,n.setAttribute("tabindex","0");const a=document.getElementById("restaurant-address");a.className="info-address",a.innerHTML=e.address,a.setAttribute("tabindex","0");const r=document.getElementById("restaurant-img");r.className="restaurant-img",r.src=DBHelper.imageUrlForRestaurant(e),r.setAttribute("alt",e.alt_text),r.setAttribute("tabindex","0"),e.operating_hours&&fillRestaurantHoursHTML(),fillReviewsHTML()}),fillRestaurantHoursHTML=((e=self.restaurant.operating_hours)=>{const t=document.getElementById("restaurant-hours");t.className="restaurant-hours",t.setAttribute("tabindex","0");for(let n in e){const a=document.createElement("tr"),r=document.createElement("td");r.innerHTML=n,a.appendChild(r);const s=document.createElement("td");s.innerHTML=e[n],a.appendChild(s),t.appendChild(a)}}),fillReviewsHTML=((e=self.restaurant.reviews)=>{const t=document.getElementById("reviews-container"),n=document.createElement("h3");if(n.innerHTML="Reviews",t.appendChild(n),!e){const e=document.createElement("p");return e.innerHTML="No reviews yet!",void t.appendChild(e)}const a=document.getElementById("reviews-list");e.forEach(e=>{a.appendChild(createReviewHTML(e))}),t.appendChild(a)}),createReviewHTML=(e=>{const t=document.createElement("li");t.setAttribute("tabindex","0");const n=document.createElement("p");n.className="review-name",n.innerHTML=e.name,t.appendChild(n);const a=document.createElement("p");a.className="review-date",a.innerHTML=e.date,t.appendChild(a);const r=document.createElement("p");r.className="review-rating",r.innerHTML=`Rating: ${e.rating}`,t.appendChild(r);const s=document.createElement("p");return s.className="review-comments",s.innerHTML=e.comments,t.appendChild(s),t}),fillBreadcrumb=((e=self.restaurant)=>{const t=document.getElementById("breadcrumb"),n=document.createElement("li");n.innerHTML=e.name,t.appendChild(n)}),getParameterByName=((e,t)=>{t||(t=window.location.href),e=e.replace(/[\[\]]/g,"\\$&");const n=new RegExp(`[?&]${e}(=([^&#]*)|&|#|$)`).exec(t);return n?n[2]?decodeURIComponent(n[2].replace(/\+/g," ")):"":null}),"serviceWorker"in navigator&&window.addEventListener("load",function(){navigator.serviceWorker.register("/sw.js").then(function(e){console.log("Service registration successful with scope: ",e.scope)},function(e){console.log("Service worker failed: ",e)})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
